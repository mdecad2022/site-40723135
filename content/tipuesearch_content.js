var tipuesearch = {"pages": [{'title': '關於', 'text': 'cmsite：wcms使用 https://github.com/mdecycu/cmsimde 作子模型 \n', 'tags': '', 'url': '關於.html'}, {'title': '布萊頓', 'text': "https://en.wikipedia.org/wiki/Python_(programming_language) \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教程： \n https://docs.python.org/3/tutorial/ \n Python的非正規式介紹 \n 縮進 \n 變量 \n 註釋 \n 數字數字 \n 字串 \n 打印 \n Python 控制流工具 \n 為了了 \n 如果 \n 範圍 \n 打開 \n 讀 \n 列表 \n 元組 \n 字典 \n 功能 \n 試用……除掉了 \n 休息 \n 目標地 \n 多少 \n 這個頁面顯示如何在同一個頁面下結合多個Ace編輯器與操作按鈕（ practice_html.txt 動態頁面文件）。 \n 練習 時，txttxt文件應該可以在啟動時.py文件中設置超目錄下載/py目錄引用。 \n 也將所有的 html 使用 Brython 生成，然後寫為 類 後，在導入時通過 實例 引用。 \n <!-- 啟動 Brython --> \n<腳本> \nwindow.onload=函數（）{ \nbrython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); \n} \n</腳本> \n 從 1 累加到 100: \n 1加到100 \n 將可迭代與迭代器 相關說明 ，使用 Brython 與 Ace Editor 在此中進行頁面整理。 \n", 'tags': '', 'url': '布萊頓.html'}, {'title': '每週進度', 'text': '', 'tags': '', 'url': '每週進度.html'}, {'title': 'W1', 'text': '本週因應中秋連假 \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '說明2022年秋季與計算機程序及計算機輔助設計與實踐課程的相關計劃與週期安排。以及如何設置ipv6 \n \n 計算機程式課程學生可以直接從 https://mde.tw/content/Python.html 進入，直接在線上練習 Brython 所支持的Python語言法。 由於是在瀏覽器上，必須要對 HTML 和 Javascript 有一些基本認識，才能充分使用 Brython 。 \xa0 \xa0 \xa0 \xa0 \xa0 \n 學生在計算機程序式課程所寫的程序中，被要求設置方法進入自己管理的Github 倉庫，而倉庫是利用Github Classroom 建立，並與承接cmde承接。 假若要將個人倉庫 git clone 到近端電腦上修改，就必須使用： \n git clone --recurse-submodules 加上提取倉庫內容的網址_URL 或 SSH 連線字符串 \n 假設第一階段只使用git clone，而沒有--recurse-submodules附加屬性選項，則可以在刪除下主倉庫內容後，以git submodule update --init --recursive下所有子模型的內容。 \n 光是要能取下取下倉儲檔案檔案檔案檔案使用者使用者近端必須執行執行執行執行執行執行執行執行執行執行執行執行執行執行執行執行可以可以可以使用使用操作操作操作系統系統安裝版安裝版安裝版，或者或者安裝版安裝版或者或者使用使用課堂課堂課堂上上上所所 所 推薦 \xa0 \n 至於要使用https或ssh協議進入git,主要牽涉到隨後修改push時的權限驗證,因為只有庫存管理權的用戶,才能對偶上螞蟻Github \n \n', 'tags': '', 'url': 'W2.html'}, {'title': '網路協議', 'text': '所有網上的應用，都牽涉網絡協議，以https而言，所有使用的網絡協議就是http，也就是超文件傳輸協議。 而https就是在利用超文件傳送的過程中，將傳送的資料加上以加密編碼後，直接到接收後再解開，是相對於http嚴謹安全的傳送。 \n Https擷取github倉儲倉儲時候時候時候時候在在在中中帳號帳號帳號帳號帳號帳號帳號帳號帳號這 串連 線驗證身分用身分用的，還，還帶有，以及時效，以及時效，使用者以及時效以及時效，使用者 \xa0 \n 由於github目前目前支援支援支援支援協定，而而輔助設計室設計室為了可用用頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬頻寬為了為了為了為了為了為了為了為了為了為了為了為了為了為了為了採用為了為了採用採用為了為了為了為了為了為了為了為了為了設計室 設計 室是能夠同時支持 IPv4 與 IPv6 協議的代理主機。 以https對git命令的Proxy設置，位於可移植程序環境中的home_ipv6目錄下，文件名為.gitconfig，使用者執行git config後的設置就存入config.home_ipv6/. \xa0 \n 至於git所有使用的 SSH 連接線協議，在Windows操作系統，可以通過 Putty  session設置達成，其中的session包含連接到github.com，所有使用的 SSH 認證有私鑰，偽裝y代理 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n 上文將使用cmsimde作為子模型的倉庫取到近端電腦的目標的，共有兩個：進行修改以及進行協同。 \n 在近端進入倉庫內容修改版的意思是，利用Python與必須的模型，可以執行cmsimde網站中的動態系統，其中所需要的模型為： \n flask flask_cors bs4 lxml 鵜鶘降價 leo pyopenssl \n flask 與 flask_cors 是互聯網框架，安裝 flask_cors 的目的是讓網站可以跨網域提取資料。 \n bs4是用來對超文件頁面的工具，讓cmsimde中的config/content.htm可以根據H1、H2與H3的標題進入頁面。 \n lxml 是將動態網頁內容轉為靜態網頁內容時所需要的閱讀模塊。 \n pelican 是用來建立網絡志的工具，可以將使用者所寫的 Markdown 轉為網絡志格式的內容。 \n markdown 是用來理解.md 文檔的工具。 \n leo \xa0 是大類管理模塊，用來編寫網絡誌或簡報的工具，也可以當做程序開發的IDE。 \n pyopenssl則在動態網頁中，以程序方式強制服務靜態網頁內容時，建立SSL連線時所需要。 \n \n', 'tags': '', 'url': '網路協議.html'}, {'title': 'Replit 用作應用程式伺服器', 'text': '除了將 Github 上的倉庫，git clone 到最近的版本外，也可以利用 Replit ，直接在瀏覽器上以 wsgi 模式，執行 cmsimde 的動態網站。 這樣可以免除在附近執行動態網站所需的網絡協議與 git 命令。 不過Replit 只 給免費帳號500 MB的存儲空間，過大的存儲並不適合 使用Replit 運行cmsimde的動態網站。 \xa0 \xa0 \xa0 \xa0 \xa0 \n 使用 Replit 執行cmsimde的過程，需要在shell執行： \xa0 \xa0 \n git 子模塊更新 --init --recursive \n 目的是取下子模型組資料，因為 Replit 與 Github 的鏈接，似乎只使用 git clone，並沒有添加上 --recurse-submodules，使用者必須手動操作。 \xa0 \xa0 \n PIP安裝燒瓶燒瓶bs4 lxml骨pelican markdown gevent gevent gevent cmsimde所所所需模組模組，與與近端改版的是是是是： leo leo leo  pyopenssl，pyopenssl，因為因為因為因為因為因為因為因為因為 Replit 系統上使用 leo ，也不需要自動配置近端服務器的SSL。 \xa0 \xa0 \xa0 \xa0 \xa0 \n 一次將動態網站配置到 Replit 之後,可以將動態網頁修改版內容,同步到對應的Github倉庫,主要利用倉庫的 Github Pages 保持狀態網頁. \xa0 \xa0 \xa0 \xa0 \n \n 以上搶取mde.tw第二週教學內容概要 \n', 'tags': '', 'url': 'Replit 用作應用程式伺服器.html'}, {'title': 'W3', 'text': '1. 透過mdecad2022的組織建立個人可以管理的倉庫(site-Github_帳號) \n 2. 利用replit帳號所啟動的動態網站進入行內容管理 \n 3. 動態轉為靜態網站內容之後，要設置方法與Github倉庫同步。 \n \n 之後申請帳號都使用@nfu 電子郵箱 \xa0 \n \n 修補課程網站安全疑惑： \xa0 \n 目的的：不想讓config/config 帶上密碼後的管理員密碼 \xa0 \n 執行步驟: \xa0 \n \n 必須先在個人的mdecad2022/site-github_帳號倉庫進入處理 \xa0 \n 第一步就是刪除config/config 設置文件 \xa0 \n \xa0 修改 .gitignore 成為： https  ://raw.githubusercontent.com/mdecad2022/site-41023242/main/.gitignore\xa0\xa0 \xa0 \xa0 \n 添加main.py:\xa0\xa0  \xa0 https://raw.githubusercontent.com/mdecad2022/site-41023242/main/main.py \xa0 \xa0 \n 在倉庫根目錄加入nocache.py，內容如下：\xa0\xa0  \xa0 https ://github.com/mdecycu/cmsimde/blob/2a41b26b6d9b1446a8b448bb6fb58a6dbb41c867/nocache.py \xa0 \xa0 \n \n \xa0 \n 之後再設計以導入方式，利用個人課程庫內容在replit建立Repl專案。 \xa0 \n 至於Repl專案，必須在Shell中，執行下面兩則命令： git submodule update --init --recursive \xa0 \xa0 \xa0 \n 在倉庫根目錄執行\xa0\xa0\xa0 \xa0 \n 表示要刪除所有子模型的內容 \xa0 \n \xa0 \n 並安裝啟動cmsimde所需的Python模型：\xa0\xa0 \xa0 \n \xa0 pip install\xa0\xa0\xa0  flask flask_cors bs4 lxml pelican markdown gevent \xa0 \n Replit 專案上的靜態內容同步至原始課程庫教學影片 \xa0 \n \xa0 \n 2b 開始在\xa0 \xa0 https://exam.cycu.org 建立立考賬號。 \xa0\xa0 \xa0 \xa0 \n \xa0 \n 執行Replit專案過程 \n \n 在Shell中執行以上紅色粗體的程序模式組程序後，可以打開個人網站並編輯個人網站轉為靜態網站進行遠程操作 \n 然後再行建立考試賬號 \n \n \xa0 \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '本週將在 Replit 執行動態網站： \xa0 \n 必須進入Shell，在倉庫根目錄執行下面兩則指令（取下子模型內容，並安裝執行所需要的模型組）。 \xa0 \n git 子模塊更新 --init --recursive \xa0 \n pip install flask flask_cors bs4 lxml pelican markdown gevent \xa0 \n \n \xa0將以上程序模式組導入Shell，導入完成並建立個人考試賬號(如下) \n \n 考試主機：\u202f  \xa0 https ://exam.cycu.org \u202f \xa0 \n 近端工具: 下載\xa0\xa0 \xa0 portable_python_3.10.6.7z \xa0 \n 便攜式git \xa0 \n 雲端工具: Replit \xa0 \n Web分式版次管理：\xa0  \xa0 https ://github.com \xa0 \xa0 \n 電腦輔助繪圖工具：\xa0 \xa0 \n \xa0\xa0\xa0 近端 NX2027 與 Solvespace \xa0 \n \xa0 雲端： https  \xa0\xa0\xa0 ://onshape.com \xa0 \xa0 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '\n (登錄stud.cycu.org)利用@nfu電子郵箱接收到的賬號與密碼，登錄stud.cycu.org：在命令列表窗口，以ssh\xa0  cad學號@stud.cycu.org，輸入以應用，密碼可吅 \xa0 \n 請到excel 檔案 查詢 stud.cycu.org 中與帳號對應的近端 (給127.0.0.1 使用) 與遠端 (給stud.cycu.org) 堡號 \xa0 \n （sftp建立與 對應 。 \xa0\xa0\xa0 \xa0 \n 與在近端 (Windows) 使用 SSH 建立公鑰/私鑰流程一致，必須在 Linux (Ubuntu) 使用 ssh-keygen 建立密鑰。所生成的id_rsa為私鑰，而乙id_rsa.pub為鑰.ssh目錄下。 \xa0 \n 使用 sftp 進入 stud.cycu.org 後，cd 到 .ssh，以獲取 id_rsa.pub 將公鑰刪除至 Windows 後，送至 Github -> 設置 -> SSH 和 GPG 設置區，通過新密匙登錄錄。 \xa0 \n 接下來要下載\xa0\xa0 config 設置文件，以sftp放入stud.cycu.org主機的.ssh目錄中。 \xa0 \n 上面的config 主要設置SSH協議對github.com 連線時的代理主機, 但是是取消下cmsimde 子模型使用的是https, 因此執行下面的列表 git clone 時將有相同時使用到S config設置文件外，也必須同時在.gitconfig文件中設置http.proxy，也就是以git config --global http.proxy\xa0  http://p42.cycu.org:3128 設置提供https連線使用的代理主機，並以 git config --global user.name 及 git config --global user.email 設置提供提供交互的身份記錄。 \xa0 \xa0 \n 在stud.cycu.org中，以git clone --recurse-submodules\xa0\xa0  git@github.com:mdecad2022/site-個人github賬號.git \xa0\xa0 取下個人倉庫。 \xa0 \n 假如先使用 git clone 並沒有取下 cmsimde 子模型內容, 只需要在設置 https 代理主機後, 進入庫根目錄執行 git submodule update --init --recursive 即可. \xa0 \n 接著下載 server.py ，在Windows下編寫 server.py ，將個人分配到的9xxxx填入後存檔，以sftp放入上列取下的庫根目錄。 \xa0 \n 在stud.cycu.org系統中，進入倉庫（site-github賬號）後，執行python3 server.py，就可以啟動動態網站。 \xa0 \n 設置完成後，各學生將會有一個廣域網上的動態網站（取代重新復制上的動態網站）， https:  \xa0//stud.cycu.org:8xxxx 看個人的動態網站。 \xa0 \n 動態網站改版後，轉為靜態，必須通過source\xa0  acp 以SSH將改版內容傳回github。 \xa0 \n 執行source acp "提交字符串" 之前必須要 git config --global user.name,\xa0  git config --global user.email,\xa0  git config --global http.proxy \xa0 \n 上面所說的採用指令模式對服務器sftp也可以利用\xa0\xa0 Filezilla portable ，以圖形介紹完成。而ssh也可以通過putty.exe執行遠程登錄。 \xa0 \n \n \xa0 \n \xa0 \n .ssh目錄下的配置： \xa0 \n Host 就是 .ssh/config 設置的對應會話名稱，此處若 Host 設置為 demo，則 SSH 對應的 .git/config 中的 URL 就必須使用 git@demo:mdecad2022/site-scrum-1.git, \xa0  demo 就是Host, Port 那那麼是隨後的 %p 也就是 SSH 協議內定的 port 22, %h 那那麼是 Hostname, 也就是 github.com \xa0 \n \n \n \n \n 1個 \xa0 \n 2個 \xa0 \n 3個 \xa0 \n 4個 \xa0 \n \n \n 主機表演 \xa0 \n 用戶 git \xa0 \n 主機名 github.com \xa0 \n ProxyCommand /usr/bin/ncat --proxy p42.cycu.org:3128 --proxy-type http %h %p \xa0 \n \n \n \n \n \xa0 \n -------------------------------------- \xa0 \n 2a在一台遠程服務器，執行個人倉庫的動態網頁。 \xa0 \n \xa0 \n \n 登入 https://mail.nfu.edu.tw \xa0  \xa0 - 查看登入stud.cycu.org 伺服器的帳號密碼, 帳號為cad+學號, 密碼為四個字元, 包括數字與小寫英文 \xa0 \n 請到excel 檔案 查詢 stud.cycu.org 中與帳號對應的近端 (給 127.0.0.1 使用, 9 開頭的端口) 與遠端 (給 stud.cycu.org, 8 開頭的端頭) \xa0 \n 修改可攜帶Python 3.10.6 start.bat，蓋掉第三行後重新啟動，目標的希冀操作系統的指令搜索路徑放於可攜帶目標搜搜。 \xa0 \n 重新啟動攜帶環境環境，在其中一列表列表列表，ssh\xa0  \xa0 cad+@sud.cycu.org ，secul secure shell shell shell seell遠程sud.cycu.org，這(若使用的網絡連接協議並沒有IPv6，可將系統的代理設置為140.130.17.4:3128 kmolab/kmolab) \xa0 \n 在ssh登錄界面，以ssh-keygen建立密碼對，.ssh/id_rsa為私鑰，id_rsa.pub為公鑰 \xa0 \n 設置方法利用 Filezilla，以 sftp 安全的（安全）文件（文件）傳輸（傳輸）協議（協議），與 stud.cycu.org 驅動器鏈接。 \xa0 \n 利用 Filezilla sftp 取下 id_rsa.pub，登錄至 Github 賬號下的設置 -> SSH 和 GPG 密匙。 \xa0 \n 對於服務器 sftp 也可以\xa0 \xa0 使用 Filezilla portable ，以圖形介紹面完成。 而 ssh 也可以通過 putty.exe 執行遠程登錄。 \xa0 \n 接下來要下載\xa0 \xa0 config 設置文件，以sftp放入stud.cycu.org主機的.ssh目錄中。 \xa0 \n 接下來要在Ubuntu（也就是stud.cycu.org這台主機所安裝的操作系統）中，設置.gitconfig，總包包含三項設置：git config --global user.name "scrum-1", git config --global user.email "scrum1@mde.tw" 以及 git config --global http.proxy http://p42.cycu.org:3128, 這三個設置必須在 ssh 登錄界面中執行, 設置完成文件將存在登錄號根目錄中的.gitconfig \xa0 \n 利用 git clone --recurse-submodules\xa0  \xa0 git@demo:mdecad2022/site-scrum-1.git \xa0  \xa0 demo \xa0 \n 接著下載 server.py ，在Windows下編寫 server.py ，將個人分配到的9xxxx填入後存檔，以sftp放入上列取下的庫根目錄。 \xa0 \n ubuntu後，會使用：pwd代表打印目錄目錄目錄，clear -clet -cd -cd -cd -ls -ls -ls -ls -ls -l列出 詳細 內容 以source acp 添加上提交字符串進行git add, git commit, git push, 如何在Windows中執行acp.bat添加上提交字符串。 \xa0 \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '在 stud.cycu.org 執行動態網站 \xa0 \n git config --global http.proxy\xa0  http://p42.cycu.org:3128 \xa0 \n \xa0 \xa0 \n git config --global user.name "名稱" \xa0 \n \xa0 \xa0 \n git config --global user.email "email" \xa0 \n \xa0 \xa0 \n git clone --recurse-submodules git@demo:mdecad2022/site-github_帳號.git s \xa0 \n \xa0 \xa0 \n git 子模塊更新 --init --recursive \xa0 \n \xa0 \xa0 \n python3 服務器.py \xa0 \n \xa0 \xa0 \n https://stud.cycu.org:8xxx \xa0 \n \xa0 \xa0 \n acp 放入倉後 \xa0 \n \xa0 \xa0 \n chmod u+x acp\xa0 \xa0 \n \xa0 \xa0 \n source acp "提交說明字串" \xa0 \n \xa0 \xa0 \n python3 服務器.py & \xa0 \n \xa0 \xa0 \n ps 輔助 |  grep“服務器.py” \xa0 \n \xa0 \xa0 \n 殺死-9 111919 \xa0 \n \xa0 \xa0 \n cd s, cd cmsimde, git pull origin master \xa0 \n \xa0 \xa0 \n cd .., python3 server.py \xa0 \n \xa0 \n 操作NX \n \n \n \n Brython << 上一頁 下一頁 >> hw \xa0 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': 'git Pull倉庫中的CMSimde模型(新增ACP按鈕) \n NX繪畫討論與操作 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '期中考 \n \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '期中考週 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '已知 block.prt 中 p8=59, p9=44, 請利用互聯網表格, 將 p8, p9 均改為 50 之後, 在瀏覽中提供新的 block_new.prt 文件下載, 並直接發佈在網頁上STL格式文檔 \xa0 \xa0 \n stl檔案 \n \n 本頁演示如何在同一頁下納入多條線上的 Ace 編輯器與操作按鈕。 \n hw10 \n 將可迭代與迭代器 相關說明 ，利用 Brython 與 Ace 編輯器整理在此頁面。 \xa0 \n 本頁演示如何在同一頁下納入多條線上的 Ace 編輯器與操作按鈕。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W11', 'text': '本頁演示如何在同一頁下納入多條線上的 Ace 編輯器與操作按鈕。 \n hw11 \n 將可迭代與迭代器 相關說明 ，利用 Brython 與 Ace 編輯器整理在此頁面。 \xa0 \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑   輸出   清除輸出區 清畫區 重新加載 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1加到100 cango_three_gears B蛇 俄羅斯方塊 \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': ' 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': ' 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑   輸出   清除輸出區 清畫區 重新加載 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'W13.html'}]};