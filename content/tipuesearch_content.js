var tipuesearch = {"pages": [{'title': '關於', 'text': 'cmsite：wcms 使用 https://github.com/mdecycu/cmsimde 作為子模塊 \n', 'tags': '', 'url': '關於.html'}, {'title': '布萊頓', 'text': "https://en.wikipedia.org/wiki/Python_(programming_language) \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教程： \n https://docs.python.org/3/tutorial/ \n Python的非正式介紹 \n 縮進 \n 變量 \n 註釋 \n 數字數字 \n 字符串 \n 打印 \n Python 控制流工具 \n 為了 \n 如果 \n 範圍 \n 打開 \n 讀 \n 列表 \n 元組 \n 字典 \n 功能 \n 試用……除了 \n 休息 \n 目的地 \n 多少 \n 這個頁面演示如何在同一個頁面下合併多個 Ace 編輯器與執行按鈕（ practice_html.txt 動態頁面文件）。 \n 練習 時，txttxt文件應該可以在啟動時.py文件中設置超目錄下載/py目錄引用。 \n 也即將所有的 html 使用 Brython 生成，然後寫為 類 後，在導入時通過 實例 引用。 \n <!-- 啟動 Brython --> \n<腳本> \nwindow.onload=函數（）{ \nbrython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); \n} \n</腳本> \n 從 1 累加到 100: \n 1加到100 \n 將 iterable 與 iterator 相關說明 ，使用 Brython 與 Ace Editor 在此中進行頁面整理。 \n", 'tags': '', 'url': '布萊頓.html'}, {'title': '每週進度', 'text': '', 'tags': '', 'url': '每週進度.html'}, {'title': 'W1', 'text': '本週因應中秋連假 \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '說明 2022 Fall 與計算機程式及電腦輔助設計與實習課程的相關規劃與期程安排.及如何設定ipv6 \n \n 計算機程式課程學員可以直接從 \xa0 https://mde.tw/content/Python.html \xa0 進入, 直接在線上練習 \xa0 Brython \xa0 所支援的 Python 語法. 由於是在瀏覽器上, 必須要對 HTML 與 Javascript 有些基本認識, 才能充份使用 \xa0 Brython . \n 學員在計算機程式課程所寫的程式, 被要求要設法放入自己管理的 Github 倉儲, 而倉儲是採用 Github Classroom 建立, 並且直接導入 cmsimde 子模組. 假如要將個人倉儲 git clone 到近端電腦上改版, 就必須使用: \n git clone --recurse-submodules 加上擷取倉儲內容的網路_URL 或 SSH 連線字串 \n 假如第一階段只用 git clone, 而沒有 --recurse-submodules 附屬指令選項, 則可以在取下主倉儲內容後, 以 git submodule update --init --recursive 取下所有子模組的內容. \n 光是要能以 git 取下倉儲檔案, 使用者的近端電腦就必須能夠執行 git, 可以使用操作系統安裝版, 或者使用課堂上所推薦的可攜程式套件中的 \xa0 portablegit . \n 至於要使用 https 或 ssh 協定進行 git, 主要牽涉到隨後改版 push 時的權限驗證, 因為只有具備倉儲管理權的用戶, 才能對 Github 上的倉儲進行改版. \n \n', 'tags': '', 'url': 'W2.html'}, {'title': '網路協定', 'text': '所有網路上的應用, 都牽涉網路協定, 以 https 而言, 所使用的網路協定就是 http, 也就是超文件傳輸協定. 而 https 就是在利用超文件傳輸的過程中, 將傳送的資料加以加密編碼後, 直到接收後再解開, 是相較於 http 嚴謹安全的傳送. \n 以 https 擷取 Github 倉儲的時候, 需要在 URL 中加上帳號 \xa0 token , 而這串連線驗證身分用的字串, 還帶有權限範圍, 以及時效, 使用者可以在 Github 帳號設定頁中取得. \n 由於 Github 目前只支援 IPv4 協定, 而在電腦輔助設計室為了擴大可用頻寬, 採用 IPv6 協定, 要讓 IPv6 協定下的 git 指令, 正確與 Github 倉儲連線, 必須透過 Proxy server (使用 \xa0 Squid ), 而且是能同時支援 IPv4 與 IPv6 協定的代理主機. 以 https 對 git 指令的 Proxy 設定, 位於可攜程式環境中的 home_ipv6 目錄下, 檔案名稱為 .gitconfig, 使用者執行 git config 後的設定就是存入 home_ipv6/.gitconfig 檔案中. \n 至於 git 所使用的 \xa0 SSH \xa0 連線協定, 在 Windows 操作系統, 可以透過 \xa0 Putty \xa0 session 設定達成, 其中的 session 包含連線到 github.com, 所使用的 \xa0 SSH \xa0 認證用 private key 位置, 還有 Proxy 設定. \n 上述將使用 cmsimde 作為子模組的倉儲取至近端電腦的目的, 共有兩個: 進行改版以及進行協同. \n 在近端進行倉儲內容改版的意思是, 利用 Python 與必要模組, 可以執行 cmsimde 網站中的動態系統, 其中所需要的模組為: \n flask flask_cors bs4 lxml pelican markdown leo pyopenssl \n flask 與 flask_cors 是網際框架, 安裝 flask_cors 的目的是讓網站可以跨網域擷取資料. \n bs4 是用來對超文件分頁的工具, 讓 cmsimde 中的 config/content.htm 可以根據 H1, H2 與 H3 的標題進行分頁. \n lxml 是將動態網頁內容轉為靜態網頁內容時所需要的解讀模組. \n pelican 是用來建立網誌的工具, 可以將使用者所寫的 Markdown 轉為網誌格式的內容. \n markdown 是用來解讀 .md 檔案的工具. \n leo \xa0 是大綱管理模組, 用來作為編寫網誌或簡報的工具, 也可以當作程式開發的 IDE. \n pyopenssl 則是在動態網頁中, 以程式方法伺服靜態網頁內容時, 建立 SSL 連線時所需. \n \n', 'tags': '', 'url': '網路協定.html'}, {'title': 'Replit 作為應用程式伺服器', 'text': '除了將 Github 上的倉儲, git clone 到近端改版外, 也可以利用 \xa0 Replit , 直接在瀏覽器上以 wsgi 模式, 執行 cmsimde 的動態網站. 如此可以免除在近端執行動態網站所需要的網路協定與 git 指令. 只不過 \xa0 Replit \xa0 只給免費帳號 500 MB 的儲存空間, 過大的倉儲並不適合採用 \xa0 Replit \xa0 執行 cmsimde 的動態網站. \n 使用 \xa0 Replit \xa0 執行 cmsimde 的過程, 需要在 shell 執行: \n git submodule update --init --recursive \n 目的是取下子模組資料, 因為 \xa0 Replit \xa0 與 Github 的連結, 似乎只使用 git clone, 並沒有加上 --recurse-submodules, 使用者必須手動執行. \n 另外則是利用 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝 cmsimde 所需模組, 與上述近端改版的差異是: 無需安裝 \xa0 leo \xa0 與 pyopenssl, 因為系統是在雲端 Replit 的主機上執行, 目前還無法在 \xa0 Replit \xa0 系統上使用 \xa0 leo , 也無需自行配置近端伺服器的 SSL. \n 一旦將動態網站配置到 \xa0 Replit \xa0 之後, 可以將動態網頁改版內容, 同步到對應的 Github 倉儲, 主要利用倉儲的 \xa0 Github Pages \xa0 伺服靜態網頁. \n \n 以上擷取mde.tw 第二週教學內容概要', 'tags': '', 'url': 'Replit 作為應用程式伺服器.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'W11', 'text': ' 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑   輸出   清除輸出區 清畫區 重新加載 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1加到100 cango_three_gears B蛇 俄羅斯方塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑   輸出   清除輸出區 清畫區 重新加載 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'W11.html'}]};